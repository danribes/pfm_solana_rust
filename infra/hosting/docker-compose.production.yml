# Task 6.6.1: Public Website Hosting & Domain Setup
# Production Docker Compose Configuration

version: '3.8'

services:
  # REVERSE PROXY & LOAD BALANCER
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: pfm-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl-config.conf:/etc/nginx/conf.d/ssl.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - pfm-frontend
      - pfm-backend
    depends_on:
      - member-portal
      - admin-dashboard
      - api-server

  # FRONTEND APPLICATIONS
  member-portal:
    build:
      context: ../../frontend/member
      dockerfile: Dockerfile.production
    image: pfm-member-portal:production
    container_name: pfm-member-portal-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.pfm-community.app
      - NEXT_PUBLIC_DOMAIN=pfm-community.app
    networks:
      - pfm-frontend

  admin-dashboard:
    build:
      context: ../../frontend/admin
      dockerfile: Dockerfile.production
    image: pfm-admin-dashboard:production
    container_name: pfm-admin-dashboard-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.pfm-community.app
      - ADMIN_SECRET_KEY=${ADMIN_SECRET_KEY}
    networks:
      - pfm-frontend

  # BACKEND SERVICES
  api-server:
    build:
      context: ../../backend
      dockerfile: Dockerfile.production
    image: pfm-api-server:production
    container_name: pfm-api-server-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - pfm-backend
      - pfm-database
    depends_on:
      - postgres
      - redis

  # DATABASE SERVICES
  postgres:
    image: postgres:15-alpine
    container_name: pfm-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pfm-database

  redis:
    image: redis:7-alpine
    container_name: pfm-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - pfm-backend

# networks: pfm-frontend, pfm-backend, pfm-database configuration
# networks: pfm-frontend, pfm-backend, pfm-database
networks:
  pfm-frontend:
    driver: bridge
  pfm-backend:
    driver: bridge
  pfm-database:
    driver: bridge
    internal: true

volumes:
  postgres-data:
  redis-data:
  nginx-cache:
