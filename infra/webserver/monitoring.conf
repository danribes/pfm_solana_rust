# Task 6.6.2: Monitoring Configuration
# Health checks, metrics, and status endpoints

# Health Check Location
location = /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain always;
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
}

# Nginx Status Endpoint
location = /nginx_status {
    stub_status on;
    access_log off;
    
    # Restrict access to monitoring systems
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    add_header Content-Type text/plain always;
}

# Detailed Status with Metrics
location = /status {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    return 200 '{"status":"ok","timestamp":"$time_iso8601","server":"$hostname","version":"nginx/$nginx_version","uptime":"$upstream_response_time"}';
    add_header Content-Type application/json always;
}

# Prometheus Metrics Endpoint
location = /metrics {
    access_log off;
    
    # Restrict access to monitoring systems
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # Return nginx metrics in Prometheus format
    stub_status on;
    add_header Content-Type text/plain always;
}

# Backend Health Proxy
location = /api/health {
    access_log off;
    proxy_pass http://backend_health/health;
    proxy_connect_timeout 2s;
    proxy_read_timeout 2s;
    proxy_send_timeout 2s;
    
    # Don't buffer health check responses
    proxy_buffering off;
    
    # Add monitoring headers
    add_header X-Backend-Status $upstream_status always;
    add_header X-Response-Time $upstream_response_time always;
}

# Deep Health Check
location = /deep-health {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # Check all services
    proxy_pass http://api_server/health/deep;
    proxy_connect_timeout 5s;
    proxy_read_timeout 10s;
    proxy_send_timeout 5s;
}

# Performance Monitoring
location = /perf {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    return 200 '{"connections_active":"$connections_active","connections_reading":"$connections_reading","connections_writing":"$connections_writing","connections_waiting":"$connections_waiting","requests":"$request_id"}';
    add_header Content-Type application/json always;
}

# Custom Error Pages
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;

location = /404.html {
    root /usr/share/nginx/html;
    internal;
}

location = /50x.html {
    root /usr/share/nginx/html;
    internal;
}

# Maintenance Mode
location = /maintenance {
    return 503 "Service temporarily unavailable for maintenance";
    add_header Content-Type text/plain always;
    add_header Retry-After 3600 always;
}

# Rate Limit Status
location = /rate-limit-status {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    return 200 '{"rate_limit_status":"$limit_req_status","connection_limit_status":"$limit_conn_status"}';
    add_header Content-Type application/json always;
}

# SSL Certificate Information
location = /ssl-info {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    return 200 '{"ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","ssl_session_id":"$ssl_session_id","ssl_session_reused":"$ssl_session_reused"}';
    add_header Content-Type application/json always;
}

# Upstream Status
location = /upstream-status {
    access_log off;
    
    # Restrict access
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    return 200 '{"upstream_addr":"$upstream_addr","upstream_status":"$upstream_status","upstream_response_time":"$upstream_response_time","upstream_connect_time":"$upstream_connect_time"}';
    add_header Content-Type application/json always;
}
