# Task 6.6.2: Rate Limiting Configuration
# Advanced rate limiting and DDoS protection

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=20r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;
limit_conn_zone $server_name zone=perserver:10m;

# Rate limiting for different endpoints
map $request_uri $limit_zone {
    ~^/api/auth       auth;
    ~^/api/upload     upload;
    ~^/api/           api;
    ~^/admin/         admin;
    default           general;
}

# Rate limiting status codes
limit_req_status 429;
limit_conn_status 429;

# Apply rate limits
limit_req zone=$limit_zone burst=20 nodelay;
limit_conn addr 10;
limit_conn perserver 1000;

# IP-based blocking (can be updated dynamically)
geo $limit {
    default 0;
    # Add IPs to block here
    # 192.168.1.1 1;
}

map $limit $limit_key {
    0 "";
    1 $binary_remote_addr;
}

limit_req_zone $limit_key zone=blocked:1m rate=1r/m;

# Request size limiting
client_body_buffer_size 128k;
client_max_body_size 64m;
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# Timeout settings to prevent slowloris attacks
client_body_timeout 12;
client_header_timeout 12;
send_timeout 10;

# Hide server version and other info
server_tokens off;

# Limit request methods
map $request_method $not_allowed_method {
    default 1;
    GET 0;
    POST 0;
    PUT 0;
    DELETE 0;
    PATCH 0;
    HEAD 0;
    OPTIONS 0;
}

# Block requests with invalid methods
if ($not_allowed_method) {
    return 405;
}

# Block requests with invalid user agents
map $http_user_agent $bad_user_agent {
    default 0;
    ~*bot 0;
    ~*spider 0;
    ~*crawler 0;
    "" 1;
    ~*^- 1;
    ~*http 1;
    ~*java 1;
    ~*python 1;
    ~*perl 1;
    ~*ruby 1;
    ~*php 1;
    ~*curl 1;
    ~*wget 1;
}

# Block bad bots and scrapers
if ($bad_user_agent) {
    return 444;
}

# Block requests with invalid referrer
map $http_referer $bad_referer {
    default 0;
    ~*semalt 1;
    ~*buttons-for-website 1;
    ~*social-buttons 1;
    ~*success-seo 1;
    ~*free-share-buttons 1;
}

if ($bad_referer) {
    return 444;
}

# Geographic blocking (example - can be customized)
geo $blocked_country {
    default 0;
    # Add country blocks if needed
    # CN 1; # Block China
    # RU 1; # Block Russia
}

if ($blocked_country) {
    return 444;
}
