# Task 6.6.2: Upstream Configuration
# Backend server definitions and load balancing

# Member Portal Upstream
upstream member_portal {
    # Load balancing method
    least_conn;
    
    # Backend servers
    server member-portal:3002 max_fails=3 fail_timeout=30s;
    # server member-portal-2:3002 max_fails=3 fail_timeout=30s backup;
    
    # Keep-alive connections
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Admin Dashboard Upstream  
upstream admin_dashboard {
    least_conn;
    
    server admin-dashboard:3001 max_fails=3 fail_timeout=30s;
    # server admin-dashboard-2:3001 max_fails=3 fail_timeout=30s backup;
    
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# API Server Upstream
upstream api_server {
    # Use IP hash for session affinity if needed
    # ip_hash;
    least_conn;
    
    server api-server:3000 max_fails=3 fail_timeout=30s weight=1;
    # server api-server-2:3000 max_fails=3 fail_timeout=30s weight=1;
    # server api-server-3:3000 max_fails=3 fail_timeout=30s weight=1;
    
    keepalive 64;
    keepalive_requests 200;
    keepalive_timeout 60s;
}

# Blockchain Service Upstream (if needed)
upstream blockchain_service {
    server blockchain:8899 max_fails=2 fail_timeout=10s;
    # server blockchain-2:8899 max_fails=2 fail_timeout=10s backup;
    
    keepalive 16;
    keepalive_requests 50;
    keepalive_timeout 30s;
}

# Health Check Configuration
upstream backend_health {
    server api-server:3000;
    keepalive 8;
}

# WebSocket Upstream for real-time features
upstream websocket {
    ip_hash; # Required for WebSocket session persistence
    
    server api-server:3000;
    # server api-server-2:3000;
    
    keepalive 32;
}

# Static Content Upstream (if using separate static server)
upstream static_content {
    server static-server:8080 max_fails=2 fail_timeout=10s;
    # server static-server-2:8080 max_fails=2 fail_timeout=10s;
    
    keepalive 16;
}

# Circuit Breaker Configuration
map $upstream_response_time $slow_backend {
    default 0;
    ~^[5-9]\d+ 1;  # Mark as slow if response time > 5 seconds
}

# Backend Server Status Monitoring
upstream_check_http_send "GET /health HTTP/1.0\r\n\r\n";
upstream_check_http_expect_alive http_2xx http_3xx;
