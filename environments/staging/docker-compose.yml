version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pfm_community_staging
      POSTGRES_USER: ${DB_USER:-pfm_user_staging}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ../../backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pfm_user_staging} -d pfm_community_staging"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_staging:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    
  backend:
    image: ${CONTAINER_REGISTRY}/${GITHUB_REPOSITORY}/backend:${IMAGE_TAG:-latest}
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - DEPLOYMENT_ID=${DEPLOYMENT_ID}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    
  frontend-admin:
    image: ${CONTAINER_REGISTRY}/${GITHUB_REPOSITORY}/frontend-admin:${IMAGE_TAG:-latest}
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SOLANA_RPC=${NEXT_PUBLIC_SOLANA_RPC}
      - NEXT_PUBLIC_NETWORK=${NEXT_PUBLIC_NETWORK}
    ports:
      - "3001:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    
  frontend-member:
    image: ${CONTAINER_REGISTRY}/${GITHUB_REPOSITORY}/frontend-member:${IMAGE_TAG:-latest}
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SOLANA_RPC=${NEXT_PUBLIC_SOLANA_RPC}
      - NEXT_PUBLIC_NETWORK=${NEXT_PUBLIC_NETWORK}
    ports:
      - "3002:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data_staging:
  redis_data_staging:

networks:
  default:
    name: pfm_staging
